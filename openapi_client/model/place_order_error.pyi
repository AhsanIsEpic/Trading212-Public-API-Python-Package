# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PlaceOrderError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            clarification = schemas.StrSchema
            
            
            class code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SELLING_EQUITY_NOT_OWNED(cls):
                    return cls("SellingEquityNotOwned")
                
                @schemas.classproperty
                def CANT_LEGALY_TRADE_EXCEPTION(cls):
                    return cls("CantLegalyTradeException")
                
                @schemas.classproperty
                def INSUFFICIENT_RESOURCES(cls):
                    return cls("InsufficientResources")
                
                @schemas.classproperty
                def INSUFFICIENT_VALUE_FOR_STOCKS_SELL(cls):
                    return cls("InsufficientValueForStocksSell")
                
                @schemas.classproperty
                def TARGET_PRICE_TOO_FAR(cls):
                    return cls("TargetPriceTooFar")
                
                @schemas.classproperty
                def TARGET_PRICE_TOO_CLOSE(cls):
                    return cls("TargetPriceTooClose")
                
                @schemas.classproperty
                def NOT_ELIGIBLE_FOR_ISA(cls):
                    return cls("NotEligibleForISA")
                
                @schemas.classproperty
                def SHARE_LENDING_AGREEMENT_NOT_ACCEPTED(cls):
                    return cls("ShareLendingAgreementNotAccepted")
                
                @schemas.classproperty
                def INSTRUMENT_NOT_FOUND(cls):
                    return cls("InstrumentNotFound")
                
                @schemas.classproperty
                def MAX_EQUITY_BUY_QUANTITY_EXCEEDED(cls):
                    return cls("MaxEquityBuyQuantityExceeded")
                
                @schemas.classproperty
                def MAX_EQUITY_SELL_QUANTITY_EXCEEDED(cls):
                    return cls("MaxEquitySellQuantityExceeded")
                
                @schemas.classproperty
                def LIMIT_PRICE_MISSING(cls):
                    return cls("LimitPriceMissing")
                
                @schemas.classproperty
                def STOP_PRICE_MISSING(cls):
                    return cls("StopPriceMissing")
                
                @schemas.classproperty
                def TICKER_MISSING(cls):
                    return cls("TickerMissing")
                
                @schemas.classproperty
                def QUANTITY_MISSING(cls):
                    return cls("QuantityMissing")
                
                @schemas.classproperty
                def MAX_QUANTITY_EXCEEDED(cls):
                    return cls("MaxQuantityExceeded")
                
                @schemas.classproperty
                def INVALID_VALUE(cls):
                    return cls("InvalidValue")
                
                @schemas.classproperty
                def INSUFFICIENT_FREE_FOR_STOCKS_EXCEPTION(cls):
                    return cls("InsufficientFreeForStocksException")
                
                @schemas.classproperty
                def MIN_VALUE_EXCEEDED(cls):
                    return cls("MinValueExceeded")
                
                @schemas.classproperty
                def MIN_QUANTITY_EXCEEDED(cls):
                    return cls("MinQuantityExceeded")
                
                @schemas.classproperty
                def PRICE_TOO_FAR(cls):
                    return cls("PriceTooFar")
                
                @schemas.classproperty
                def UNDEFINED(cls):
                    return cls("UNDEFINED")
                
                @schemas.classproperty
                def NOT_AVAILABLE_FOR_REAL_MONEY_ACCOUNTS(cls):
                    return cls("NotAvailableForRealMoneyAccounts")
            __annotations__ = {
                "clarification": clarification,
                "code": code,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clarification"]) -> MetaOapg.properties.clarification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clarification", "code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clarification"]) -> typing.Union[MetaOapg.properties.clarification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clarification", "code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        clarification: typing.Union[MetaOapg.properties.clarification, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PlaceOrderError':
        return super().__new__(
            cls,
            *_args,
            clarification=clarification,
            code=code,
            _configuration=_configuration,
            **kwargs,
        )
