# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class InvestmentResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            priceAvgInvestedValue = schemas.NumberSchema
            priceAvgResult = schemas.NumberSchema
            priceAvgResultCoef = schemas.NumberSchema
            priceAvgValue = schemas.NumberSchema
            __annotations__ = {
                "priceAvgInvestedValue": priceAvgInvestedValue,
                "priceAvgResult": priceAvgResult,
                "priceAvgResultCoef": priceAvgResultCoef,
                "priceAvgValue": priceAvgValue,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceAvgInvestedValue"]) -> MetaOapg.properties.priceAvgInvestedValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceAvgResult"]) -> MetaOapg.properties.priceAvgResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceAvgResultCoef"]) -> MetaOapg.properties.priceAvgResultCoef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceAvgValue"]) -> MetaOapg.properties.priceAvgValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["priceAvgInvestedValue", "priceAvgResult", "priceAvgResultCoef", "priceAvgValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceAvgInvestedValue"]) -> typing.Union[MetaOapg.properties.priceAvgInvestedValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceAvgResult"]) -> typing.Union[MetaOapg.properties.priceAvgResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceAvgResultCoef"]) -> typing.Union[MetaOapg.properties.priceAvgResultCoef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceAvgValue"]) -> typing.Union[MetaOapg.properties.priceAvgValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["priceAvgInvestedValue", "priceAvgResult", "priceAvgResultCoef", "priceAvgValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        priceAvgInvestedValue: typing.Union[MetaOapg.properties.priceAvgInvestedValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priceAvgResult: typing.Union[MetaOapg.properties.priceAvgResult, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priceAvgResultCoef: typing.Union[MetaOapg.properties.priceAvgResultCoef, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priceAvgValue: typing.Union[MetaOapg.properties.priceAvgValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvestmentResult':
        return super().__new__(
            cls,
            *_args,
            priceAvgInvestedValue=priceAvgInvestedValue,
            priceAvgResult=priceAvgResult,
            priceAvgResultCoef=priceAvgResultCoef,
            priceAvgValue=priceAvgValue,
            _configuration=_configuration,
            **kwargs,
        )
