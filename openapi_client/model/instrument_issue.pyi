# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class InstrumentIssue(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DELISTED(cls):
                    return cls("DELISTED")
                
                @schemas.classproperty
                def SUSPENDED(cls):
                    return cls("SUSPENDED")
                
                @schemas.classproperty
                def NO_LONGER_TRADABLE(cls):
                    return cls("NO_LONGER_TRADABLE")
                
                @schemas.classproperty
                def MAX_POSITION_SIZE_REACHED(cls):
                    return cls("MAX_POSITION_SIZE_REACHED")
                
                @schemas.classproperty
                def APPROACHING_MAX_POSITION_SIZE(cls):
                    return cls("APPROACHING_MAX_POSITION_SIZE")
                
                @schemas.classproperty
                def COMPLEX_INSTRUMENT_APP_TEST_REQUIRED(cls):
                    return cls("COMPLEX_INSTRUMENT_APP_TEST_REQUIRED")
            
            
            class severity(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IRREVERSIBLE(cls):
                    return cls("IRREVERSIBLE")
                
                @schemas.classproperty
                def REVERSIBLE(cls):
                    return cls("REVERSIBLE")
                
                @schemas.classproperty
                def INFORMATIVE(cls):
                    return cls("INFORMATIVE")
            __annotations__ = {
                "name": name,
                "severity": severity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "severity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "severity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InstrumentIssue':
        return super().__new__(
            cls,
            *_args,
            name=name,
            severity=severity,
            _configuration=_configuration,
            **kwargs,
        )
