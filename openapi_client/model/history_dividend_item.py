# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class HistoryDividendItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.NumberSchema
            amountInEuro = schemas.NumberSchema
            grossAmountPerShare = schemas.NumberSchema
            paidOn = schemas.DateTimeSchema
            quantity = schemas.NumberSchema
            reference = schemas.StrSchema
            ticker = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "amountInEuro": amountInEuro,
                "grossAmountPerShare": grossAmountPerShare,
                "paidOn": paidOn,
                "quantity": quantity,
                "reference": reference,
                "ticker": ticker,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountInEuro"]) -> MetaOapg.properties.amountInEuro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossAmountPerShare"]) -> MetaOapg.properties.grossAmountPerShare: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidOn"]) -> MetaOapg.properties.paidOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker"]) -> MetaOapg.properties.ticker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "amountInEuro", "grossAmountPerShare", "paidOn", "quantity", "reference", "ticker", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountInEuro"]) -> typing.Union[MetaOapg.properties.amountInEuro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossAmountPerShare"]) -> typing.Union[MetaOapg.properties.grossAmountPerShare, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidOn"]) -> typing.Union[MetaOapg.properties.paidOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker"]) -> typing.Union[MetaOapg.properties.ticker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "amountInEuro", "grossAmountPerShare", "paidOn", "quantity", "reference", "ticker", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountInEuro: typing.Union[MetaOapg.properties.amountInEuro, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        grossAmountPerShare: typing.Union[MetaOapg.properties.grossAmountPerShare, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        paidOn: typing.Union[MetaOapg.properties.paidOn, str, datetime, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        ticker: typing.Union[MetaOapg.properties.ticker, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HistoryDividendItem':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            amountInEuro=amountInEuro,
            grossAmountPerShare=grossAmountPerShare,
            paidOn=paidOn,
            quantity=quantity,
            reference=reference,
            ticker=ticker,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
