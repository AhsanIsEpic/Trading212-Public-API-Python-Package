# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Order(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            creationTime = schemas.DateTimeSchema
            filledQuantity = schemas.NumberSchema
            filledValue = schemas.NumberSchema
            id = schemas.Int64Schema
            limitPrice = schemas.NumberSchema
            quantity = schemas.NumberSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LOCAL(cls):
                    return cls("LOCAL")
                
                @schemas.classproperty
                def UNCONFIRMED(cls):
                    return cls("UNCONFIRMED")
                
                @schemas.classproperty
                def CONFIRMED(cls):
                    return cls("CONFIRMED")
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def CANCELLING(cls):
                    return cls("CANCELLING")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def PARTIALLY_FILLED(cls):
                    return cls("PARTIALLY_FILLED")
                
                @schemas.classproperty
                def FILLED(cls):
                    return cls("FILLED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def REPLACING(cls):
                    return cls("REPLACING")
                
                @schemas.classproperty
                def REPLACED(cls):
                    return cls("REPLACED")
            stopPrice = schemas.NumberSchema
            
            
            class strategy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def QUANTITY(cls):
                    return cls("QUANTITY")
                
                @schemas.classproperty
                def VALUE(cls):
                    return cls("VALUE")
            ticker = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LIMIT(cls):
                    return cls("LIMIT")
                
                @schemas.classproperty
                def STOP(cls):
                    return cls("STOP")
                
                @schemas.classproperty
                def MARKET(cls):
                    return cls("MARKET")
                
                @schemas.classproperty
                def STOP_LIMIT(cls):
                    return cls("STOP_LIMIT")
            value = schemas.NumberSchema
            __annotations__ = {
                "creationTime": creationTime,
                "filledQuantity": filledQuantity,
                "filledValue": filledValue,
                "id": id,
                "limitPrice": limitPrice,
                "quantity": quantity,
                "status": status,
                "stopPrice": stopPrice,
                "strategy": strategy,
                "ticker": ticker,
                "type": type,
                "value": value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filledQuantity"]) -> MetaOapg.properties.filledQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filledValue"]) -> MetaOapg.properties.filledValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limitPrice"]) -> MetaOapg.properties.limitPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopPrice"]) -> MetaOapg.properties.stopPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategy"]) -> MetaOapg.properties.strategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker"]) -> MetaOapg.properties.ticker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["creationTime", "filledQuantity", "filledValue", "id", "limitPrice", "quantity", "status", "stopPrice", "strategy", "ticker", "type", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> typing.Union[MetaOapg.properties.creationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filledQuantity"]) -> typing.Union[MetaOapg.properties.filledQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filledValue"]) -> typing.Union[MetaOapg.properties.filledValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limitPrice"]) -> typing.Union[MetaOapg.properties.limitPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopPrice"]) -> typing.Union[MetaOapg.properties.stopPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategy"]) -> typing.Union[MetaOapg.properties.strategy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker"]) -> typing.Union[MetaOapg.properties.ticker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creationTime", "filledQuantity", "filledValue", "id", "limitPrice", "quantity", "status", "stopPrice", "strategy", "ticker", "type", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        creationTime: typing.Union[MetaOapg.properties.creationTime, str, datetime, schemas.Unset] = schemas.unset,
        filledQuantity: typing.Union[MetaOapg.properties.filledQuantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        filledValue: typing.Union[MetaOapg.properties.filledValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        limitPrice: typing.Union[MetaOapg.properties.limitPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        stopPrice: typing.Union[MetaOapg.properties.stopPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        strategy: typing.Union[MetaOapg.properties.strategy, str, schemas.Unset] = schemas.unset,
        ticker: typing.Union[MetaOapg.properties.ticker, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Order':
        return super().__new__(
            cls,
            *_args,
            creationTime=creationTime,
            filledQuantity=filledQuantity,
            filledValue=filledValue,
            id=id,
            limitPrice=limitPrice,
            quantity=quantity,
            status=status,
            stopPrice=stopPrice,
            strategy=strategy,
            ticker=ticker,
            type=type,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
