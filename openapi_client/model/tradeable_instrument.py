# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TradeableInstrument(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            addedOn = schemas.DateTimeSchema
            
            
            class currencyCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 3
                    min_length = 3
            isin = schemas.StrSchema
            maxOpenQuantity = schemas.NumberSchema
            minTradeQuantity = schemas.NumberSchema
            name = schemas.StrSchema
            shortName = schemas.StrSchema
            ticker = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CRYPTOCURRENCY": "CRYPTOCURRENCY",
                        "ETF": "ETF",
                        "FOREX": "FOREX",
                        "FUTURES": "FUTURES",
                        "INDEX": "INDEX",
                        "STOCK": "STOCK",
                        "WARRANT": "WARRANT",
                        "CRYPTO": "CRYPTO",
                        "CVR": "CVR",
                        "CORPACT": "CORPACT",
                    }
                
                @schemas.classproperty
                def CRYPTOCURRENCY(cls):
                    return cls("CRYPTOCURRENCY")
                
                @schemas.classproperty
                def ETF(cls):
                    return cls("ETF")
                
                @schemas.classproperty
                def FOREX(cls):
                    return cls("FOREX")
                
                @schemas.classproperty
                def FUTURES(cls):
                    return cls("FUTURES")
                
                @schemas.classproperty
                def INDEX(cls):
                    return cls("INDEX")
                
                @schemas.classproperty
                def STOCK(cls):
                    return cls("STOCK")
                
                @schemas.classproperty
                def WARRANT(cls):
                    return cls("WARRANT")
                
                @schemas.classproperty
                def CRYPTO(cls):
                    return cls("CRYPTO")
                
                @schemas.classproperty
                def CVR(cls):
                    return cls("CVR")
                
                @schemas.classproperty
                def CORPACT(cls):
                    return cls("CORPACT")
            workingScheduleId = schemas.Int64Schema
            __annotations__ = {
                "addedOn": addedOn,
                "currencyCode": currencyCode,
                "isin": isin,
                "maxOpenQuantity": maxOpenQuantity,
                "minTradeQuantity": minTradeQuantity,
                "name": name,
                "shortName": shortName,
                "ticker": ticker,
                "type": type,
                "workingScheduleId": workingScheduleId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addedOn"]) -> MetaOapg.properties.addedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isin"]) -> MetaOapg.properties.isin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxOpenQuantity"]) -> MetaOapg.properties.maxOpenQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minTradeQuantity"]) -> MetaOapg.properties.minTradeQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortName"]) -> MetaOapg.properties.shortName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker"]) -> MetaOapg.properties.ticker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingScheduleId"]) -> MetaOapg.properties.workingScheduleId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addedOn", "currencyCode", "isin", "maxOpenQuantity", "minTradeQuantity", "name", "shortName", "ticker", "type", "workingScheduleId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addedOn"]) -> typing.Union[MetaOapg.properties.addedOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isin"]) -> typing.Union[MetaOapg.properties.isin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxOpenQuantity"]) -> typing.Union[MetaOapg.properties.maxOpenQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minTradeQuantity"]) -> typing.Union[MetaOapg.properties.minTradeQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortName"]) -> typing.Union[MetaOapg.properties.shortName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker"]) -> typing.Union[MetaOapg.properties.ticker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingScheduleId"]) -> typing.Union[MetaOapg.properties.workingScheduleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addedOn", "currencyCode", "isin", "maxOpenQuantity", "minTradeQuantity", "name", "shortName", "ticker", "type", "workingScheduleId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        addedOn: typing.Union[MetaOapg.properties.addedOn, str, datetime, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        isin: typing.Union[MetaOapg.properties.isin, str, schemas.Unset] = schemas.unset,
        maxOpenQuantity: typing.Union[MetaOapg.properties.maxOpenQuantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minTradeQuantity: typing.Union[MetaOapg.properties.minTradeQuantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        shortName: typing.Union[MetaOapg.properties.shortName, str, schemas.Unset] = schemas.unset,
        ticker: typing.Union[MetaOapg.properties.ticker, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        workingScheduleId: typing.Union[MetaOapg.properties.workingScheduleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TradeableInstrument':
        return super().__new__(
            cls,
            *_args,
            addedOn=addedOn,
            currencyCode=currencyCode,
            isin=isin,
            maxOpenQuantity=maxOpenQuantity,
            minTradeQuantity=minTradeQuantity,
            name=name,
            shortName=shortName,
            ticker=ticker,
            type=type,
            workingScheduleId=workingScheduleId,
            _configuration=_configuration,
            **kwargs,
        )
