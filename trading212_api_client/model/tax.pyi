# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from trading212_api_client import schemas  # noqa: F401


class Tax(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            fillId = schemas.StrSchema
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COMMISSION_TURNOVER(cls):
                    return cls("COMMISSION_TURNOVER")
                
                @schemas.classproperty
                def CURRENCY_CONVERSION_FEE(cls):
                    return cls("CURRENCY_CONVERSION_FEE")
                
                @schemas.classproperty
                def FINRA_FEE(cls):
                    return cls("FINRA_FEE")
                
                @schemas.classproperty
                def FRENCH_TRANSACTION_TAX(cls):
                    return cls("FRENCH_TRANSACTION_TAX")
                
                @schemas.classproperty
                def PTM_LEVY(cls):
                    return cls("PTM_LEVY")
                
                @schemas.classproperty
                def STAMP_DUTY(cls):
                    return cls("STAMP_DUTY")
                
                @schemas.classproperty
                def STAMP_DUTY_RESERVE_TAX(cls):
                    return cls("STAMP_DUTY_RESERVE_TAX")
                
                @schemas.classproperty
                def TRANSACTION_FEE(cls):
                    return cls("TRANSACTION_FEE")
            quantity = schemas.NumberSchema
            timeCharged = schemas.DateTimeSchema
            __annotations__ = {
                "fillId": fillId,
                "name": name,
                "quantity": quantity,
                "timeCharged": timeCharged,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillId"]) -> MetaOapg.properties.fillId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeCharged"]) -> MetaOapg.properties.timeCharged: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fillId", "name", "quantity", "timeCharged", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillId"]) -> typing.Union[MetaOapg.properties.fillId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeCharged"]) -> typing.Union[MetaOapg.properties.timeCharged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fillId", "name", "quantity", "timeCharged", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        fillId: typing.Union[MetaOapg.properties.fillId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        timeCharged: typing.Union[MetaOapg.properties.timeCharged, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Tax':
        return super().__new__(
            cls,
            *_args,
            fillId=fillId,
            name=name,
            quantity=quantity,
            timeCharged=timeCharged,
            _configuration=_configuration,
            **kwargs,
        )
