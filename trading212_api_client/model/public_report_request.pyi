# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from trading212_api_client import schemas  # noqa: F401


class PublicReportRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def dataIncluded() -> typing.Type['ReportDataIncluded']:
                return ReportDataIncluded
            timeFrom = schemas.DateTimeSchema
            timeTo = schemas.DateTimeSchema
            __annotations__ = {
                "dataIncluded": dataIncluded,
                "timeFrom": timeFrom,
                "timeTo": timeTo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataIncluded"]) -> 'ReportDataIncluded': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeFrom"]) -> MetaOapg.properties.timeFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeTo"]) -> MetaOapg.properties.timeTo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataIncluded", "timeFrom", "timeTo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataIncluded"]) -> typing.Union['ReportDataIncluded', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeFrom"]) -> typing.Union[MetaOapg.properties.timeFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeTo"]) -> typing.Union[MetaOapg.properties.timeTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataIncluded", "timeFrom", "timeTo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dataIncluded: typing.Union['ReportDataIncluded', schemas.Unset] = schemas.unset,
        timeFrom: typing.Union[MetaOapg.properties.timeFrom, str, datetime, schemas.Unset] = schemas.unset,
        timeTo: typing.Union[MetaOapg.properties.timeTo, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PublicReportRequest':
        return super().__new__(
            cls,
            *_args,
            dataIncluded=dataIncluded,
            timeFrom=timeFrom,
            timeTo=timeTo,
            _configuration=_configuration,
            **kwargs,
        )

from trading212_api_client.model.report_data_included import ReportDataIncluded
