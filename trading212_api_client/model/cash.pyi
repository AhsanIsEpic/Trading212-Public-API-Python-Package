# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from trading212_api_client import schemas  # noqa: F401


class Cash(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            blocked = schemas.NumberSchema
            free = schemas.NumberSchema
            invested = schemas.NumberSchema
            pieCash = schemas.NumberSchema
            ppl = schemas.NumberSchema
            result = schemas.NumberSchema
            total = schemas.NumberSchema
            __annotations__ = {
                "blocked": blocked,
                "free": free,
                "invested": invested,
                "pieCash": pieCash,
                "ppl": ppl,
                "result": result,
                "total": total,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocked"]) -> MetaOapg.properties.blocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["free"]) -> MetaOapg.properties.free: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invested"]) -> MetaOapg.properties.invested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pieCash"]) -> MetaOapg.properties.pieCash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppl"]) -> MetaOapg.properties.ppl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blocked", "free", "invested", "pieCash", "ppl", "result", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocked"]) -> typing.Union[MetaOapg.properties.blocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["free"]) -> typing.Union[MetaOapg.properties.free, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invested"]) -> typing.Union[MetaOapg.properties.invested, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pieCash"]) -> typing.Union[MetaOapg.properties.pieCash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppl"]) -> typing.Union[MetaOapg.properties.ppl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blocked", "free", "invested", "pieCash", "ppl", "result", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        blocked: typing.Union[MetaOapg.properties.blocked, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        free: typing.Union[MetaOapg.properties.free, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        invested: typing.Union[MetaOapg.properties.invested, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pieCash: typing.Union[MetaOapg.properties.pieCash, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ppl: typing.Union[MetaOapg.properties.ppl, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        result: typing.Union[MetaOapg.properties.result, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Cash':
        return super().__new__(
            cls,
            *_args,
            blocked=blocked,
            free=free,
            invested=invested,
            pieCash=pieCash,
            ppl=ppl,
            result=result,
            total=total,
            _configuration=_configuration,
            **kwargs,
        )
