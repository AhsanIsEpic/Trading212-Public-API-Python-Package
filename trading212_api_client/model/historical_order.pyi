# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from trading212_api_client import schemas  # noqa: F401


class HistoricalOrder(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            dateCreated = schemas.DateTimeSchema
            dateExecuted = schemas.DateTimeSchema
            dateModified = schemas.DateTimeSchema
            
            
            class executor(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def API(cls):
                    return cls("API")
                
                @schemas.classproperty
                def IOS(cls):
                    return cls("IOS")
                
                @schemas.classproperty
                def ANDROID(cls):
                    return cls("ANDROID")
                
                @schemas.classproperty
                def WEB(cls):
                    return cls("WEB")
                
                @schemas.classproperty
                def SYSTEM(cls):
                    return cls("SYSTEM")
                
                @schemas.classproperty
                def AUTOINVEST(cls):
                    return cls("AUTOINVEST")
            fillCost = schemas.NumberSchema
            fillId = schemas.Int64Schema
            fillPrice = schemas.NumberSchema
            fillResult = schemas.NumberSchema
            
            
            class fillType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TOTV(cls):
                    return cls("TOTV")
                
                @schemas.classproperty
                def OTC(cls):
                    return cls("OTC")
            filledQuantity = schemas.NumberSchema
            filledValue = schemas.NumberSchema
            id = schemas.Int64Schema
            limitPrice = schemas.NumberSchema
            orderedQuantity = schemas.NumberSchema
            orderedValue = schemas.NumberSchema
            parentOrder = schemas.Int64Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LOCAL(cls):
                    return cls("LOCAL")
                
                @schemas.classproperty
                def UNCONFIRMED(cls):
                    return cls("UNCONFIRMED")
                
                @schemas.classproperty
                def CONFIRMED(cls):
                    return cls("CONFIRMED")
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def CANCELLING(cls):
                    return cls("CANCELLING")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def PARTIALLY_FILLED(cls):
                    return cls("PARTIALLY_FILLED")
                
                @schemas.classproperty
                def FILLED(cls):
                    return cls("FILLED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def REPLACING(cls):
                    return cls("REPLACING")
                
                @schemas.classproperty
                def REPLACED(cls):
                    return cls("REPLACED")
            stopPrice = schemas.NumberSchema
            
            
            class taxes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tax']:
                        return Tax
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Tax'], typing.List['Tax']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taxes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tax':
                    return super().__getitem__(i)
            ticker = schemas.StrSchema
            
            
            class timeValidity(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("DAY")
                
                @schemas.classproperty
                def GOOD_TILL_CANCEL(cls):
                    return cls("GOOD_TILL_CANCEL")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LIMIT(cls):
                    return cls("LIMIT")
                
                @schemas.classproperty
                def STOP(cls):
                    return cls("STOP")
                
                @schemas.classproperty
                def MARKET(cls):
                    return cls("MARKET")
                
                @schemas.classproperty
                def STOP_LIMIT(cls):
                    return cls("STOP_LIMIT")
            __annotations__ = {
                "dateCreated": dateCreated,
                "dateExecuted": dateExecuted,
                "dateModified": dateModified,
                "executor": executor,
                "fillCost": fillCost,
                "fillId": fillId,
                "fillPrice": fillPrice,
                "fillResult": fillResult,
                "fillType": fillType,
                "filledQuantity": filledQuantity,
                "filledValue": filledValue,
                "id": id,
                "limitPrice": limitPrice,
                "orderedQuantity": orderedQuantity,
                "orderedValue": orderedValue,
                "parentOrder": parentOrder,
                "status": status,
                "stopPrice": stopPrice,
                "taxes": taxes,
                "ticker": ticker,
                "timeValidity": timeValidity,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateExecuted"]) -> MetaOapg.properties.dateExecuted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executor"]) -> MetaOapg.properties.executor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillCost"]) -> MetaOapg.properties.fillCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillId"]) -> MetaOapg.properties.fillId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillPrice"]) -> MetaOapg.properties.fillPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillResult"]) -> MetaOapg.properties.fillResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillType"]) -> MetaOapg.properties.fillType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filledQuantity"]) -> MetaOapg.properties.filledQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filledValue"]) -> MetaOapg.properties.filledValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limitPrice"]) -> MetaOapg.properties.limitPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderedQuantity"]) -> MetaOapg.properties.orderedQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderedValue"]) -> MetaOapg.properties.orderedValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentOrder"]) -> MetaOapg.properties.parentOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopPrice"]) -> MetaOapg.properties.stopPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxes"]) -> MetaOapg.properties.taxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker"]) -> MetaOapg.properties.ticker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeValidity"]) -> MetaOapg.properties.timeValidity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateCreated", "dateExecuted", "dateModified", "executor", "fillCost", "fillId", "fillPrice", "fillResult", "fillType", "filledQuantity", "filledValue", "id", "limitPrice", "orderedQuantity", "orderedValue", "parentOrder", "status", "stopPrice", "taxes", "ticker", "timeValidity", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateExecuted"]) -> typing.Union[MetaOapg.properties.dateExecuted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateModified"]) -> typing.Union[MetaOapg.properties.dateModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executor"]) -> typing.Union[MetaOapg.properties.executor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillCost"]) -> typing.Union[MetaOapg.properties.fillCost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillId"]) -> typing.Union[MetaOapg.properties.fillId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillPrice"]) -> typing.Union[MetaOapg.properties.fillPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillResult"]) -> typing.Union[MetaOapg.properties.fillResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillType"]) -> typing.Union[MetaOapg.properties.fillType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filledQuantity"]) -> typing.Union[MetaOapg.properties.filledQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filledValue"]) -> typing.Union[MetaOapg.properties.filledValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limitPrice"]) -> typing.Union[MetaOapg.properties.limitPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderedQuantity"]) -> typing.Union[MetaOapg.properties.orderedQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderedValue"]) -> typing.Union[MetaOapg.properties.orderedValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentOrder"]) -> typing.Union[MetaOapg.properties.parentOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopPrice"]) -> typing.Union[MetaOapg.properties.stopPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxes"]) -> typing.Union[MetaOapg.properties.taxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker"]) -> typing.Union[MetaOapg.properties.ticker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeValidity"]) -> typing.Union[MetaOapg.properties.timeValidity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateCreated", "dateExecuted", "dateModified", "executor", "fillCost", "fillId", "fillPrice", "fillResult", "fillType", "filledQuantity", "filledValue", "id", "limitPrice", "orderedQuantity", "orderedValue", "parentOrder", "status", "stopPrice", "taxes", "ticker", "timeValidity", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, schemas.Unset] = schemas.unset,
        dateExecuted: typing.Union[MetaOapg.properties.dateExecuted, str, datetime, schemas.Unset] = schemas.unset,
        dateModified: typing.Union[MetaOapg.properties.dateModified, str, datetime, schemas.Unset] = schemas.unset,
        executor: typing.Union[MetaOapg.properties.executor, str, schemas.Unset] = schemas.unset,
        fillCost: typing.Union[MetaOapg.properties.fillCost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fillId: typing.Union[MetaOapg.properties.fillId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fillPrice: typing.Union[MetaOapg.properties.fillPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fillResult: typing.Union[MetaOapg.properties.fillResult, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fillType: typing.Union[MetaOapg.properties.fillType, str, schemas.Unset] = schemas.unset,
        filledQuantity: typing.Union[MetaOapg.properties.filledQuantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        filledValue: typing.Union[MetaOapg.properties.filledValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        limitPrice: typing.Union[MetaOapg.properties.limitPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        orderedQuantity: typing.Union[MetaOapg.properties.orderedQuantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        orderedValue: typing.Union[MetaOapg.properties.orderedValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        parentOrder: typing.Union[MetaOapg.properties.parentOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        stopPrice: typing.Union[MetaOapg.properties.stopPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        taxes: typing.Union[MetaOapg.properties.taxes, list, tuple, schemas.Unset] = schemas.unset,
        ticker: typing.Union[MetaOapg.properties.ticker, str, schemas.Unset] = schemas.unset,
        timeValidity: typing.Union[MetaOapg.properties.timeValidity, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HistoricalOrder':
        return super().__new__(
            cls,
            *_args,
            dateCreated=dateCreated,
            dateExecuted=dateExecuted,
            dateModified=dateModified,
            executor=executor,
            fillCost=fillCost,
            fillId=fillId,
            fillPrice=fillPrice,
            fillResult=fillResult,
            fillType=fillType,
            filledQuantity=filledQuantity,
            filledValue=filledValue,
            id=id,
            limitPrice=limitPrice,
            orderedQuantity=orderedQuantity,
            orderedValue=orderedValue,
            parentOrder=parentOrder,
            status=status,
            stopPrice=stopPrice,
            taxes=taxes,
            ticker=ticker,
            timeValidity=timeValidity,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from trading212_api_client.model.tax import Tax
