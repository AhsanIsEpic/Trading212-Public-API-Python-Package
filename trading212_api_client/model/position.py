# coding: utf-8

"""
    Trading212 Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from trading212_api_client import schemas  # noqa: F401


class Position(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            averagePrice = schemas.NumberSchema
            currentPrice = schemas.NumberSchema
            
            
            class frontend(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "API": "API",
                        "IOS": "IOS",
                        "ANDROID": "ANDROID",
                        "WEB": "WEB",
                        "SYSTEM": "SYSTEM",
                        "AUTOINVEST": "AUTOINVEST",
                    }
                
                @schemas.classproperty
                def API(cls):
                    return cls("API")
                
                @schemas.classproperty
                def IOS(cls):
                    return cls("IOS")
                
                @schemas.classproperty
                def ANDROID(cls):
                    return cls("ANDROID")
                
                @schemas.classproperty
                def WEB(cls):
                    return cls("WEB")
                
                @schemas.classproperty
                def SYSTEM(cls):
                    return cls("SYSTEM")
                
                @schemas.classproperty
                def AUTOINVEST(cls):
                    return cls("AUTOINVEST")
            fxPpl = schemas.NumberSchema
            initialFillDate = schemas.DateTimeSchema
            maxBuy = schemas.NumberSchema
            maxSell = schemas.NumberSchema
            pieQuantity = schemas.NumberSchema
            ppl = schemas.NumberSchema
            quantity = schemas.NumberSchema
            ticker = schemas.StrSchema
            __annotations__ = {
                "averagePrice": averagePrice,
                "currentPrice": currentPrice,
                "frontend": frontend,
                "fxPpl": fxPpl,
                "initialFillDate": initialFillDate,
                "maxBuy": maxBuy,
                "maxSell": maxSell,
                "pieQuantity": pieQuantity,
                "ppl": ppl,
                "quantity": quantity,
                "ticker": ticker,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averagePrice"]) -> MetaOapg.properties.averagePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPrice"]) -> MetaOapg.properties.currentPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frontend"]) -> MetaOapg.properties.frontend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fxPpl"]) -> MetaOapg.properties.fxPpl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initialFillDate"]) -> MetaOapg.properties.initialFillDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxBuy"]) -> MetaOapg.properties.maxBuy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSell"]) -> MetaOapg.properties.maxSell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pieQuantity"]) -> MetaOapg.properties.pieQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppl"]) -> MetaOapg.properties.ppl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker"]) -> MetaOapg.properties.ticker: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["averagePrice", "currentPrice", "frontend", "fxPpl", "initialFillDate", "maxBuy", "maxSell", "pieQuantity", "ppl", "quantity", "ticker", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averagePrice"]) -> typing.Union[MetaOapg.properties.averagePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPrice"]) -> typing.Union[MetaOapg.properties.currentPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frontend"]) -> typing.Union[MetaOapg.properties.frontend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fxPpl"]) -> typing.Union[MetaOapg.properties.fxPpl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initialFillDate"]) -> typing.Union[MetaOapg.properties.initialFillDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxBuy"]) -> typing.Union[MetaOapg.properties.maxBuy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSell"]) -> typing.Union[MetaOapg.properties.maxSell, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pieQuantity"]) -> typing.Union[MetaOapg.properties.pieQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppl"]) -> typing.Union[MetaOapg.properties.ppl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker"]) -> typing.Union[MetaOapg.properties.ticker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["averagePrice", "currentPrice", "frontend", "fxPpl", "initialFillDate", "maxBuy", "maxSell", "pieQuantity", "ppl", "quantity", "ticker", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        averagePrice: typing.Union[MetaOapg.properties.averagePrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currentPrice: typing.Union[MetaOapg.properties.currentPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        frontend: typing.Union[MetaOapg.properties.frontend, str, schemas.Unset] = schemas.unset,
        fxPpl: typing.Union[MetaOapg.properties.fxPpl, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        initialFillDate: typing.Union[MetaOapg.properties.initialFillDate, str, datetime, schemas.Unset] = schemas.unset,
        maxBuy: typing.Union[MetaOapg.properties.maxBuy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxSell: typing.Union[MetaOapg.properties.maxSell, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pieQuantity: typing.Union[MetaOapg.properties.pieQuantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ppl: typing.Union[MetaOapg.properties.ppl, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ticker: typing.Union[MetaOapg.properties.ticker, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Position':
        return super().__new__(
            cls,
            *_args,
            averagePrice=averagePrice,
            currentPrice=currentPrice,
            frontend=frontend,
            fxPpl=fxPpl,
            initialFillDate=initialFillDate,
            maxBuy=maxBuy,
            maxSell=maxSell,
            pieQuantity=pieQuantity,
            ppl=ppl,
            quantity=quantity,
            ticker=ticker,
            _configuration=_configuration,
            **kwargs,
        )
